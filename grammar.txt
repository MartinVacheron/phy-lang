program        → declaration* EOF ;

declaration    → structDecl
               | varDecl
               | funcDecl
               | statement ;

structDecl     → "struct" IDENTIFIER "{" funcDecl* "}" ;
varDecl        → "var" IDENTIFIER ( ":" TYPE )? ( "=" expression )? ;
funcDecl       → "fn" function ;
function       → IDENTIFIER "(" paramters? ")" block ;
parameters     → IDENTIFIER ( "," IDENTIFIER )* ;

statement      → exprStmt
               | ifStmt
               | block
               | whileStmt
               | forStmt
               | returnStmt
               | printStmt ;

ifStmt         → "if" expression "{" statement "}" ( "else" "{" statement "}" )? ;
block          → "{" declaration* "}" ;
whileStmt      → "while" expression "{" statement "}" ;
froStmt        → "for" expression "in" (( INTEGER ".." )? INTEGER) "{" statement "}" ;
returnStmt     → "return" expression? ;

exprStmt       → expression ;
printStmt      → "print" expression ;
expression     → assignment ;

assignment     → ( call "." )? IDENTIFIER "=" assignment
               | logic_or ;
logic_or       → logic_and ( "or" logic_and )* ;
logic_and      → equality ( "and" equality )* ;
equality       → comparison ( ( "!=" | "==" ) comparison )* ;
comparison     → term ( ( ">" | ">=" | "<" | "<=" ) term )* ;
term           → factor ( ( "-" | "+" ) factor )* ;
factor         → unary ( ( "/" | "*" ) unary )* ;
unary          → ( "!" | "-" ) unary
               | call ;

call           → primary ( "(" arguments? ")" | "." IDENTIFIER )* ;
arguments      → expression ( "," expression )* ;

primary        → "true" | "false" | "null"
               | NUMBER | STRING
               | IDENTIFIER
               | "(" expression ")" ;
